const { Employee } = require('../../models/employee');
const mongoose = require('mongoose')
const fs = require('fs');
const dotenv = require('dotenv').config();
const image_folder = process.env.IMAGE_FOLDER;

//Get list of employees
exports.employeesList = async (req,res) => {
    try{
        const employeesList = await Employee.find({});

        res.status(200).json(
            {
                success: true,
                message : employeesList
            }
        );
    } catch(e){
        return res.status(500).json(
            {
                success: false,
                message : 'Erreur inconnue contactez le web master'
            }
        )
    }
}

//Create employee
exports.createEmployee = async (req, res) =>{
    try{
        //We verify the file type
        const file = req.file;

        if(!file){
            return res.status(400).send({
                success: false,
                message: 'image manquante'
            })
        }

        const fileName = req.file.filename;
        const basePath = `${req.protocol}://${req.get('host')}/${image_folder}/`;
       
        //We create our new employee object
        const employee = new Employee({
            civitlity : req.body.civitlity,
            firstname : req.body.firstname,
            lastname : req.body.lastname,
            position : req.body.position,            
            image : `${basePath}${fileName}`
        })

        await employee.save()
        .then(() =>{
            res.status(201).json({
                success: true,
                message: "L'employé est créé avec succès"});
        })

    }catch(e){
        return res.status(500).json(
            {
                success: false,
                message : 'Erreur lors de la création, contactez le web master'
            }
        )
    }
}

//Update employee
exports.updateEmployee = async(req, res) =>{

    try{
        //We verify if the id passed is generated by our mongoose instance
        if(!mongoose.isValidObjectId(req.params.id)){
            return res.status(400).send({
                success: false,
                response: "Modification impossible"
            })
        }

        const file = req.file;

        const dataWithoutFileChanged = { ...req.body }; 
        const dataWithFileChanged = { ...req.body, image: `${req.protocol}://${req.get('host')}/public/uploads/${req.file?.filename}`}; 

        const updatedData = file ? dataWithFileChanged : dataWithoutFileChanged;

        await Employee.findByIdAndUpdate(
            req.params.id,
            updatedData
        ).then( employee =>{

            if( updatedData?.image){
                const filename = employee.image.split('/images/')[1];
                fs.unlink(`${image_folder}/${filename}`);
            }

            res.status(200).json({
                success:true, 
                message: "Données de l'employée modifiée avec succes"
            });
        })

    } catch(e){
        res.status(400).json({
            success: false,
            message: 'Il semble y avoir une erreur, re-essayez plus tard'
        })
    }
}

//Delete employee
exports.deleteEmployee = async (req, res) =>{
    try{

        //We verify if the id passed is generated by our mongoose instance
        if(!mongoose.isValidObjectId(req.params.id)){
            return res.status(400).send({
                success: false,
                response: "Suppression impossible"
            })
        }
        //We find and remove the corresponding employee if founded
        

        await Employee.findById(req.params.id).
        then(employee =>{

            const filename = employee.image.split('/images/')[1];
            fs.unlink(`${image_folder}/${filename}`, async () =>{
                await Employee.deleteOne({_id: req.params.id})
                .then( () => {
                    res.status(200).json({
                        success: true,
                        message: " Employé est supprimé"
                    });
                })
            })
        })
    
    } catch(e){
        res.status(400).json({
            success: false,
            message: 'Il semble y avoir une erreur, re-essayez plus tard'
        })
    }
}