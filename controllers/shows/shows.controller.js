const mongoose = require('mongoose');
const dotenv = require('dotenv').config();
const { Show } = require('../../models/show');
const fs = require('fs');

const image_folder = process.env.IMAGE_FOLDER;

exports.showsList = async (req, res) =>{
    try{
        const showsList = await Show.find({});
        res.status(200).json(
            {
                success: true,
                message : showsList
            }
        );
    } catch(e){
        return res.status(500).json(
            {
                success: false,
                message : 'Erreur inconnue, contactez le web master'
            }
        )
    }
}

exports.getShow = async(req,res) =>{
    try{

        const show = await Show.findById(req.params.id)

        res.status(200).json(
            {
                success: true,
                message : show
            }
        );

    } catch(e){
        return res.status(500).json(
            {
                success: false,
                message : 'Erreur inconnue, contactez le web master'
            }
        )
    }
}

exports.createShow = async (req,res) =>{
    try{

        //We verify the file type
        const file = req.file;

        if(!file){
            return res.status(400).send({
                success: false,
                message: 'image manquante'
            })
        }

        const fileName = req.file.filename;
        const basePath = `${req.protocol}://${req.get('host')}/${image_folder}/`;
       
        const show = new Show ({
            name: req.body.name,
            description: req.body.description,
            image: `${basePath}${fileName}`
        })

        await show.save()
                .then(()=>{
                    res.status(201).json({
                        success: true,
                        message: "Type d'émission créé avec succès"
                    });
                })

    } catch(e){
        return res.status(500).json(
            {
                success: false,
                message : 'Erreur lors de la création, contactez le web master'
            }
        )
    }
}

exports.updateShow = async (req, res) =>{

    try{
        //We verify if the id passed is generated by our mongoose instance
        if(!mongoose.isValidObjectId(req.params.id)){
            return res.status(400).send({
                success: false,
                response: "Modification impossible"
            })
        }

        const file = req.file;

        const dataWithoutFileChanged = { ...req.body }; 
        const dataWithFileChanged = { ...req.body, image: `${req.protocol}://${req.get('host')}/${image_folder}/${req.file?.filename}`}; 

        const updatedData = file ? dataWithFileChanged : dataWithoutFileChanged;

                await Show.findByIdAndUpdate(
                    req.params.id,
                    updatedData
                ).then( show =>{
                    
                    if( updatedData?.image){
                        const filename = show.image.split('/images/')[1];
                        fs.unlink(`${image_folder}/${filename}`, () =>{})
                    }

                    res.status(200).json({
                        success:true, 
                        message: `Émission ${show.name} modifiée avec succès`
                    });   
                })

    } catch(e){

        res.status(400).json({
            success: false,
            message: 'Il semble y avoir une erreur, re-essayez plus tard'
        })
    }
}

exports.deleteShow = async (req, res) =>{
    try{

        //We verify if the id passed is generated by our mongoose instance
        if(!mongoose.isValidObjectId(req.params.id)){
            return res.status(400).send({
                success: false,
                response: "Suppression impossible"
            })
        }
        //We find and remove the corresponding employee if founded
        

        await Show.findById(req.params.id).
        then(show =>{

            const filename = show.image.split('/images/')[1];
            fs.unlink(`${image_folder}/${filename}`, async () =>{
                await Show.deleteOne({_id: req.params.id})
                .then( () => {
                    res.status(200).json({
                        success: true,
                        message: `Émission ${show.name} supprimée avec succès`
                    });
                })
            })
        })
    
    } catch(e){
        res.status(400).json({
            success: false,
            message: 'Il semble y avoir une erreur, re-essayez plus tard'
        })
    }
}